// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: pluginsocket.proto

package kong_plugin_protocol

import (
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CmdGetPluginNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CmdGetPluginNames) Reset() {
	*x = CmdGetPluginNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdGetPluginNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdGetPluginNames) ProtoMessage() {}

func (x *CmdGetPluginNames) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdGetPluginNames.ProtoReflect.Descriptor instead.
func (*CmdGetPluginNames) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{0}
}

type CmdGetPluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CmdGetPluginInfo) Reset() {
	*x = CmdGetPluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdGetPluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdGetPluginInfo) ProtoMessage() {}

func (x *CmdGetPluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdGetPluginInfo.ProtoReflect.Descriptor instead.
func (*CmdGetPluginInfo) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{1}
}

func (x *CmdGetPluginInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CmdStartInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Config []byte `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CmdStartInstance) Reset() {
	*x = CmdStartInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdStartInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdStartInstance) ProtoMessage() {}

func (x *CmdStartInstance) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdStartInstance.ProtoReflect.Descriptor instead.
func (*CmdStartInstance) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{2}
}

func (x *CmdStartInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CmdStartInstance) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

type CmdGetInstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *CmdGetInstanceStatus) Reset() {
	*x = CmdGetInstanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdGetInstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdGetInstanceStatus) ProtoMessage() {}

func (x *CmdGetInstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdGetInstanceStatus.ProtoReflect.Descriptor instead.
func (*CmdGetInstanceStatus) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{3}
}

func (x *CmdGetInstanceStatus) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type CmdCloseInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *CmdCloseInstance) Reset() {
	*x = CmdCloseInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdCloseInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdCloseInstance) ProtoMessage() {}

func (x *CmdCloseInstance) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdCloseInstance.ProtoReflect.Descriptor instead.
func (*CmdCloseInstance) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{4}
}

func (x *CmdCloseInstance) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type CmdHandleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32  `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	EventName  string `protobuf:"bytes,2,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
}

func (x *CmdHandleEvent) Reset() {
	*x = CmdHandleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdHandleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdHandleEvent) ProtoMessage() {}

func (x *CmdHandleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdHandleEvent.ProtoReflect.Descriptor instead.
func (*CmdHandleEvent) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{5}
}

func (x *CmdHandleEvent) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *CmdHandleEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

type RpcCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Types that are assignable to Call:
	//	*RpcCall_CmdGetPluginNames
	//	*RpcCall_CmdGetPluginInfo
	//	*RpcCall_CmdStartInstance
	//	*RpcCall_CmdGetInstanceStatus
	//	*RpcCall_CmdCloseInstance
	//	*RpcCall_CmdHandleEvent
	Call isRpcCall_Call `protobuf_oneof:"call"`
}

func (x *RpcCall) Reset() {
	*x = RpcCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcCall) ProtoMessage() {}

func (x *RpcCall) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcCall.ProtoReflect.Descriptor instead.
func (*RpcCall) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{6}
}

func (x *RpcCall) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (m *RpcCall) GetCall() isRpcCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *RpcCall) GetCmdGetPluginNames() *CmdGetPluginNames {
	if x, ok := x.GetCall().(*RpcCall_CmdGetPluginNames); ok {
		return x.CmdGetPluginNames
	}
	return nil
}

func (x *RpcCall) GetCmdGetPluginInfo() *CmdGetPluginInfo {
	if x, ok := x.GetCall().(*RpcCall_CmdGetPluginInfo); ok {
		return x.CmdGetPluginInfo
	}
	return nil
}

func (x *RpcCall) GetCmdStartInstance() *CmdStartInstance {
	if x, ok := x.GetCall().(*RpcCall_CmdStartInstance); ok {
		return x.CmdStartInstance
	}
	return nil
}

func (x *RpcCall) GetCmdGetInstanceStatus() *CmdGetInstanceStatus {
	if x, ok := x.GetCall().(*RpcCall_CmdGetInstanceStatus); ok {
		return x.CmdGetInstanceStatus
	}
	return nil
}

func (x *RpcCall) GetCmdCloseInstance() *CmdCloseInstance {
	if x, ok := x.GetCall().(*RpcCall_CmdCloseInstance); ok {
		return x.CmdCloseInstance
	}
	return nil
}

func (x *RpcCall) GetCmdHandleEvent() *CmdHandleEvent {
	if x, ok := x.GetCall().(*RpcCall_CmdHandleEvent); ok {
		return x.CmdHandleEvent
	}
	return nil
}

type isRpcCall_Call interface {
	isRpcCall_Call()
}

type RpcCall_CmdGetPluginNames struct {
	CmdGetPluginNames *CmdGetPluginNames `protobuf:"bytes,31,opt,name=cmd_get_plugin_names,json=cmdGetPluginNames,proto3,oneof"`
}

type RpcCall_CmdGetPluginInfo struct {
	CmdGetPluginInfo *CmdGetPluginInfo `protobuf:"bytes,32,opt,name=cmd_get_plugin_info,json=cmdGetPluginInfo,proto3,oneof"`
}

type RpcCall_CmdStartInstance struct {
	CmdStartInstance *CmdStartInstance `protobuf:"bytes,33,opt,name=cmd_start_instance,json=cmdStartInstance,proto3,oneof"`
}

type RpcCall_CmdGetInstanceStatus struct {
	CmdGetInstanceStatus *CmdGetInstanceStatus `protobuf:"bytes,34,opt,name=cmd_get_instance_status,json=cmdGetInstanceStatus,proto3,oneof"`
}

type RpcCall_CmdCloseInstance struct {
	CmdCloseInstance *CmdCloseInstance `protobuf:"bytes,35,opt,name=cmd_close_instance,json=cmdCloseInstance,proto3,oneof"`
}

type RpcCall_CmdHandleEvent struct {
	CmdHandleEvent *CmdHandleEvent `protobuf:"bytes,36,opt,name=cmd_handle_event,json=cmdHandleEvent,proto3,oneof"`
}

func (*RpcCall_CmdGetPluginNames) isRpcCall_Call() {}

func (*RpcCall_CmdGetPluginInfo) isRpcCall_Call() {}

func (*RpcCall_CmdStartInstance) isRpcCall_Call() {}

func (*RpcCall_CmdGetInstanceStatus) isRpcCall_Call() {}

func (*RpcCall_CmdCloseInstance) isRpcCall_Call() {}

func (*RpcCall_CmdHandleEvent) isRpcCall_Call() {}

type PluginNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *PluginNames) Reset() {
	*x = PluginNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginNames) ProtoMessage() {}

func (x *PluginNames) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginNames.ProtoReflect.Descriptor instead.
func (*PluginNames) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{7}
}

func (x *PluginNames) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type PluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdatedAt int64    `protobuf:"varint,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LoadedAt  int64    `protobuf:"varint,3,opt,name=loaded_at,json=loadedAt,proto3" json:"loaded_at,omitempty"`
	Phases    []string `protobuf:"bytes,4,rep,name=phases,proto3" json:"phases,omitempty"`
	Version   string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Priority  int32    `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	Schema    string   `protobuf:"bytes,7,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *PluginInfo) Reset() {
	*x = PluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfo) ProtoMessage() {}

func (x *PluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfo.ProtoReflect.Descriptor instead.
func (*PluginInfo) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{8}
}

func (x *PluginInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PluginInfo) GetLoadedAt() int64 {
	if x != nil {
		return x.LoadedAt
	}
	return 0
}

func (x *PluginInfo) GetPhases() []string {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *PluginInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PluginInfo) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

type InstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InstanceId int32          `protobuf:"varint,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Config     *_struct.Value `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	StartedAt  int64          `protobuf:"varint,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
}

func (x *InstanceStatus) Reset() {
	*x = InstanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatus) ProtoMessage() {}

func (x *InstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatus.ProtoReflect.Descriptor instead.
func (*InstanceStatus) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{9}
}

func (x *InstanceStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceStatus) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *InstanceStatus) GetConfig() *_struct.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *InstanceStatus) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

type RpcReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Types that are assignable to Return:
	//	*RpcReturn_PluginNames
	//	*RpcReturn_PluginInfo
	//	*RpcReturn_InstanceStatus
	Return isRpcReturn_Return `protobuf_oneof:"return"`
}

func (x *RpcReturn) Reset() {
	*x = RpcReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcReturn) ProtoMessage() {}

func (x *RpcReturn) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcReturn.ProtoReflect.Descriptor instead.
func (*RpcReturn) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{10}
}

func (x *RpcReturn) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (m *RpcReturn) GetReturn() isRpcReturn_Return {
	if m != nil {
		return m.Return
	}
	return nil
}

func (x *RpcReturn) GetPluginNames() *PluginNames {
	if x, ok := x.GetReturn().(*RpcReturn_PluginNames); ok {
		return x.PluginNames
	}
	return nil
}

func (x *RpcReturn) GetPluginInfo() *PluginInfo {
	if x, ok := x.GetReturn().(*RpcReturn_PluginInfo); ok {
		return x.PluginInfo
	}
	return nil
}

func (x *RpcReturn) GetInstanceStatus() *InstanceStatus {
	if x, ok := x.GetReturn().(*RpcReturn_InstanceStatus); ok {
		return x.InstanceStatus
	}
	return nil
}

type isRpcReturn_Return interface {
	isRpcReturn_Return()
}

type RpcReturn_PluginNames struct {
	PluginNames *PluginNames `protobuf:"bytes,31,opt,name=plugin_names,json=pluginNames,proto3,oneof"`
}

type RpcReturn_PluginInfo struct {
	PluginInfo *PluginInfo `protobuf:"bytes,32,opt,name=plugin_info,json=pluginInfo,proto3,oneof"`
}

type RpcReturn_InstanceStatus struct {
	InstanceStatus *InstanceStatus `protobuf:"bytes,33,opt,name=instance_status,json=instanceStatus,proto3,oneof"`
}

func (*RpcReturn_PluginNames) isRpcReturn_Return() {}

func (*RpcReturn_PluginInfo) isRpcReturn_Return() {}

func (*RpcReturn_InstanceStatus) isRpcReturn_Return() {}

type KV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K string         `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	V *_struct.Value `protobuf:"bytes,2,opt,name=v,proto3" json:"v,omitempty"`
}

func (x *KV) Reset() {
	*x = KV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KV) ProtoMessage() {}

func (x *KV) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KV.ProtoReflect.Descriptor instead.
func (*KV) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{11}
}

func (x *KV) GetK() string {
	if x != nil {
		return x.K
	}
	return ""
}

func (x *KV) GetV() *_struct.Value {
	if x != nil {
		return x.V
	}
	return nil
}

type Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V bool `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
}

func (x *Bool) Reset() {
	*x = Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bool) ProtoMessage() {}

func (x *Bool) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bool.ProtoReflect.Descriptor instead.
func (*Bool) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{12}
}

func (x *Bool) GetV() bool {
	if x != nil {
		return x.V
	}
	return false
}

type Int struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V int32 `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
}

func (x *Int) Reset() {
	*x = Int{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int) ProtoMessage() {}

func (x *Int) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int.ProtoReflect.Descriptor instead.
func (*Int) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{13}
}

func (x *Int) GetV() int32 {
	if x != nil {
		return x.V
	}
	return 0
}

type Number struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V float64 `protobuf:"fixed64,1,opt,name=v,proto3" json:"v,omitempty"`
}

func (x *Number) Reset() {
	*x = Number{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Number) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Number) ProtoMessage() {}

func (x *Number) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Number.ProtoReflect.Descriptor instead.
func (*Number) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{14}
}

func (x *Number) GetV() float64 {
	if x != nil {
		return x.V
	}
	return 0
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V string `protobuf:"bytes,1,opt,name=v,proto3" json:"v,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{15}
}

func (x *String) GetV() string {
	if x != nil {
		return x.V
	}
	return ""
}

type ExitArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32           `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Body    string          `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Headers *_struct.Struct `protobuf:"bytes,3,opt,name=headers,proto3" json:"headers,omitempty"`
}

func (x *ExitArgs) Reset() {
	*x = ExitArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitArgs) ProtoMessage() {}

func (x *ExitArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitArgs.ProtoReflect.Descriptor instead.
func (*ExitArgs) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{16}
}

func (x *ExitArgs) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ExitArgs) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *ExitArgs) GetHeaders() *_struct.Struct {
	if x != nil {
		return x.Headers
	}
	return nil
}

type ServiceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ServiceKey) Reset() {
	*x = ServiceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceKey) ProtoMessage() {}

func (x *ServiceKey) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceKey.ProtoReflect.Descriptor instead.
func (*ServiceKey) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{17}
}

func (x *ServiceKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CertificateKey) Reset() {
	*x = CertificateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateKey) ProtoMessage() {}

func (x *CertificateKey) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateKey.ProtoReflect.Descriptor instead.
func (*CertificateKey) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{18}
}

func (x *CertificateKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt               int64       `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt               int64       `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name                    string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Protocols               []string    `protobuf:"bytes,5,rep,name=protocols,proto3" json:"protocols,omitempty"`
	Methods                 []string    `protobuf:"bytes,6,rep,name=methods,proto3" json:"methods,omitempty"`
	Hosts                   []string    `protobuf:"bytes,7,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Paths                   []string    `protobuf:"bytes,8,rep,name=paths,proto3" json:"paths,omitempty"`
	Headers                 []string    `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty"`
	HttpsRedirectStatusCode int32       `protobuf:"varint,10,opt,name=https_redirect_status_code,json=httpsRedirectStatusCode,proto3" json:"https_redirect_status_code,omitempty"`
	RegexPriority           int32       `protobuf:"varint,11,opt,name=regex_priority,json=regexPriority,proto3" json:"regex_priority,omitempty"`
	StripPath               bool        `protobuf:"varint,12,opt,name=strip_path,json=stripPath,proto3" json:"strip_path,omitempty"`
	PreserveHost            bool        `protobuf:"varint,13,opt,name=preserve_host,json=preserveHost,proto3" json:"preserve_host,omitempty"`
	Snis                    []string    `protobuf:"bytes,14,rep,name=snis,proto3" json:"snis,omitempty"`
	Sources                 []string    `protobuf:"bytes,15,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations            []string    `protobuf:"bytes,16,rep,name=destinations,proto3" json:"destinations,omitempty"`
	Tags                    []string    `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty"`
	Service                 *ServiceKey `protobuf:"bytes,18,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{19}
}

func (x *Route) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Route) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Route) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Route) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Route) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *Route) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *Route) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *Route) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *Route) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Route) GetHttpsRedirectStatusCode() int32 {
	if x != nil {
		return x.HttpsRedirectStatusCode
	}
	return 0
}

func (x *Route) GetRegexPriority() int32 {
	if x != nil {
		return x.RegexPriority
	}
	return 0
}

func (x *Route) GetStripPath() bool {
	if x != nil {
		return x.StripPath
	}
	return false
}

func (x *Route) GetPreserveHost() bool {
	if x != nil {
		return x.PreserveHost
	}
	return false
}

func (x *Route) GetSnis() []string {
	if x != nil {
		return x.Snis
	}
	return nil
}

func (x *Route) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Route) GetDestinations() []string {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *Route) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Route) GetService() *ServiceKey {
	if x != nil {
		return x.Service
	}
	return nil
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt         int64           `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64           `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name              string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Retries           int32           `protobuf:"varint,5,opt,name=retries,proto3" json:"retries,omitempty"`
	Protocol          string          `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Host              string          `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	Port              int32           `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	Path              string          `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty"`
	ConnectTimeout    int32           `protobuf:"varint,10,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	WriteTimeout      int32           `protobuf:"varint,11,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	ReadTimeout       int32           `protobuf:"varint,12,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	Tags              []string        `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	ClientCertificate *CertificateKey `protobuf:"bytes,14,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{20}
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Service) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Service) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *Service) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Service) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Service) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Service) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Service) GetConnectTimeout() int32 {
	if x != nil {
		return x.ConnectTimeout
	}
	return 0
}

func (x *Service) GetWriteTimeout() int32 {
	if x != nil {
		return x.WriteTimeout
	}
	return 0
}

func (x *Service) GetReadTimeout() int32 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

func (x *Service) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Service) GetClientCertificate() *CertificateKey {
	if x != nil {
		return x.ClientCertificate
	}
	return nil
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{21}
}

func (x *Target) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Target) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ConsumerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ByUsername bool   `protobuf:"varint,2,opt,name=by_username,json=byUsername,proto3" json:"by_username,omitempty"`
}

func (x *ConsumerSpec) Reset() {
	*x = ConsumerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerSpec) ProtoMessage() {}

func (x *ConsumerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerSpec.ProtoReflect.Descriptor instead.
func (*ConsumerSpec) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{22}
}

func (x *ConsumerSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConsumerSpec) GetByUsername() bool {
	if x != nil {
		return x.ByUsername
	}
	return false
}

type Consumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt int64    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Username  string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	CustomId  string   `protobuf:"bytes,4,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty"`
	Tags      []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Consumer) Reset() {
	*x = Consumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumer) ProtoMessage() {}

func (x *Consumer) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumer.ProtoReflect.Descriptor instead.
func (*Consumer) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{23}
}

func (x *Consumer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Consumer) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Consumer) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Consumer) GetCustomId() string {
	if x != nil {
		return x.CustomId
	}
	return ""
}

func (x *Consumer) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AuthenticatedCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConsumerId string `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
}

func (x *AuthenticatedCredential) Reset() {
	*x = AuthenticatedCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatedCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatedCredential) ProtoMessage() {}

func (x *AuthenticatedCredential) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatedCredential.ProtoReflect.Descriptor instead.
func (*AuthenticatedCredential) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{24}
}

func (x *AuthenticatedCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuthenticatedCredential) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

type AuthenticateArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumer   *Consumer                `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Credential *AuthenticatedCredential `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *AuthenticateArgs) Reset() {
	*x = AuthenticateArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateArgs) ProtoMessage() {}

func (x *AuthenticateArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateArgs.ProtoReflect.Descriptor instead.
func (*AuthenticateArgs) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{25}
}

func (x *AuthenticateArgs) GetConsumer() *Consumer {
	if x != nil {
		return x.Consumer
	}
	return nil
}

func (x *AuthenticateArgs) GetCredential() *AuthenticatedCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

type MemoryStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuaSharedDicts *MemoryStats_LuaSharedDicts `protobuf:"bytes,1,opt,name=lua_shared_dicts,json=luaSharedDicts,proto3" json:"lua_shared_dicts,omitempty"`
	WorkersLuaVms  []*MemoryStats_WorkerLuaVm  `protobuf:"bytes,2,rep,name=workers_lua_vms,json=workersLuaVms,proto3" json:"workers_lua_vms,omitempty"`
}

func (x *MemoryStats) Reset() {
	*x = MemoryStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStats) ProtoMessage() {}

func (x *MemoryStats) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStats.ProtoReflect.Descriptor instead.
func (*MemoryStats) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{26}
}

func (x *MemoryStats) GetLuaSharedDicts() *MemoryStats_LuaSharedDicts {
	if x != nil {
		return x.LuaSharedDicts
	}
	return nil
}

func (x *MemoryStats) GetWorkersLuaVms() []*MemoryStats_WorkerLuaVm {
	if x != nil {
		return x.WorkersLuaVms
	}
	return nil
}

type StringMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M map[string]string `protobuf:"bytes,1,rep,name=m,proto3" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StringMap) Reset() {
	*x = StringMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMap) ProtoMessage() {}

func (x *StringMap) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMap.ProtoReflect.Descriptor instead.
func (*StringMap) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{27}
}

func (x *StringMap) GetM() map[string]string {
	if x != nil {
		return x.M
	}
	return nil
}

type PdkArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*PdkArg_B
	//	*PdkArg_I
	//	*PdkArg_F
	//	*PdkArg_S
	//	*PdkArg_M
	//	*PdkArg_Error
	//	*PdkArg_Credential
	//	*PdkArg_Route
	//	*PdkArg_Service
	//	*PdkArg_Consumer
	//	*PdkArg_MemoryStats
	Data isPdkArg_Data `protobuf_oneof:"data"`
}

func (x *PdkArg) Reset() {
	*x = PdkArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdkArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdkArg) ProtoMessage() {}

func (x *PdkArg) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdkArg.ProtoReflect.Descriptor instead.
func (*PdkArg) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{28}
}

func (m *PdkArg) GetData() isPdkArg_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *PdkArg) GetB() bool {
	if x, ok := x.GetData().(*PdkArg_B); ok {
		return x.B
	}
	return false
}

func (x *PdkArg) GetI() int64 {
	if x, ok := x.GetData().(*PdkArg_I); ok {
		return x.I
	}
	return 0
}

func (x *PdkArg) GetF() float64 {
	if x, ok := x.GetData().(*PdkArg_F); ok {
		return x.F
	}
	return 0
}

func (x *PdkArg) GetS() string {
	if x, ok := x.GetData().(*PdkArg_S); ok {
		return x.S
	}
	return ""
}

func (x *PdkArg) GetM() *StringMap {
	if x, ok := x.GetData().(*PdkArg_M); ok {
		return x.M
	}
	return nil
}

func (x *PdkArg) GetError() string {
	if x, ok := x.GetData().(*PdkArg_Error); ok {
		return x.Error
	}
	return ""
}

func (x *PdkArg) GetCredential() *AuthenticatedCredential {
	if x, ok := x.GetData().(*PdkArg_Credential); ok {
		return x.Credential
	}
	return nil
}

func (x *PdkArg) GetRoute() *Route {
	if x, ok := x.GetData().(*PdkArg_Route); ok {
		return x.Route
	}
	return nil
}

func (x *PdkArg) GetService() *Service {
	if x, ok := x.GetData().(*PdkArg_Service); ok {
		return x.Service
	}
	return nil
}

func (x *PdkArg) GetConsumer() *Consumer {
	if x, ok := x.GetData().(*PdkArg_Consumer); ok {
		return x.Consumer
	}
	return nil
}

func (x *PdkArg) GetMemoryStats() *MemoryStats {
	if x, ok := x.GetData().(*PdkArg_MemoryStats); ok {
		return x.MemoryStats
	}
	return nil
}

type isPdkArg_Data interface {
	isPdkArg_Data()
}

type PdkArg_B struct {
	B bool `protobuf:"varint,31,opt,name=b,proto3,oneof"`
}

type PdkArg_I struct {
	I int64 `protobuf:"varint,32,opt,name=i,proto3,oneof"`
}

type PdkArg_F struct {
	F float64 `protobuf:"fixed64,33,opt,name=f,proto3,oneof"`
}

type PdkArg_S struct {
	S string `protobuf:"bytes,34,opt,name=s,proto3,oneof"`
}

type PdkArg_M struct {
	M *StringMap `protobuf:"bytes,35,opt,name=m,proto3,oneof"`
}

type PdkArg_Error struct {
	Error string `protobuf:"bytes,36,opt,name=error,proto3,oneof"`
}

type PdkArg_Credential struct {
	Credential *AuthenticatedCredential `protobuf:"bytes,40,opt,name=credential,proto3,oneof"`
}

type PdkArg_Route struct {
	Route *Route `protobuf:"bytes,41,opt,name=route,proto3,oneof"`
}

type PdkArg_Service struct {
	Service *Service `protobuf:"bytes,42,opt,name=service,proto3,oneof"`
}

type PdkArg_Consumer struct {
	Consumer *Consumer `protobuf:"bytes,43,opt,name=consumer,proto3,oneof"`
}

type PdkArg_MemoryStats struct {
	MemoryStats *MemoryStats `protobuf:"bytes,44,opt,name=memory_stats,json=memoryStats,proto3,oneof"`
}

func (*PdkArg_B) isPdkArg_Data() {}

func (*PdkArg_I) isPdkArg_Data() {}

func (*PdkArg_F) isPdkArg_Data() {}

func (*PdkArg_S) isPdkArg_Data() {}

func (*PdkArg_M) isPdkArg_Data() {}

func (*PdkArg_Error) isPdkArg_Data() {}

func (*PdkArg_Credential) isPdkArg_Data() {}

func (*PdkArg_Route) isPdkArg_Data() {}

func (*PdkArg_Service) isPdkArg_Data() {}

func (*PdkArg_Consumer) isPdkArg_Data() {}

func (*PdkArg_MemoryStats) isPdkArg_Data() {}

type PdkCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int64     `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	EventId  int64     `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Cmd      string    `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Args     []*PdkArg `protobuf:"bytes,31,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *PdkCall) Reset() {
	*x = PdkCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdkCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdkCall) ProtoMessage() {}

func (x *PdkCall) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdkCall.ProtoReflect.Descriptor instead.
func (*PdkCall) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{29}
}

func (x *PdkCall) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PdkCall) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *PdkCall) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *PdkCall) GetArgs() []*PdkArg {
	if x != nil {
		return x.Args
	}
	return nil
}

type PdkReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int64   `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	EventId  int64   `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Cmd      string  `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Arg      *PdkArg `protobuf:"bytes,31,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *PdkReturn) Reset() {
	*x = PdkReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdkReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdkReturn) ProtoMessage() {}

func (x *PdkReturn) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdkReturn.ProtoReflect.Descriptor instead.
func (*PdkReturn) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{30}
}

func (x *PdkReturn) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PdkReturn) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *PdkReturn) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *PdkReturn) GetArg() *PdkArg {
	if x != nil {
		return x.Arg
	}
	return nil
}

type MemoryStats_LuaSharedDicts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kong        *MemoryStats_LuaSharedDicts_DictStats `protobuf:"bytes,1,opt,name=kong,proto3" json:"kong,omitempty"`
	KongDbCache *MemoryStats_LuaSharedDicts_DictStats `protobuf:"bytes,2,opt,name=kong_db_cache,json=kongDbCache,proto3" json:"kong_db_cache,omitempty"`
}

func (x *MemoryStats_LuaSharedDicts) Reset() {
	*x = MemoryStats_LuaSharedDicts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryStats_LuaSharedDicts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStats_LuaSharedDicts) ProtoMessage() {}

func (x *MemoryStats_LuaSharedDicts) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStats_LuaSharedDicts.ProtoReflect.Descriptor instead.
func (*MemoryStats_LuaSharedDicts) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{26, 0}
}

func (x *MemoryStats_LuaSharedDicts) GetKong() *MemoryStats_LuaSharedDicts_DictStats {
	if x != nil {
		return x.Kong
	}
	return nil
}

func (x *MemoryStats_LuaSharedDicts) GetKongDbCache() *MemoryStats_LuaSharedDicts_DictStats {
	if x != nil {
		return x.KongDbCache
	}
	return nil
}

type MemoryStats_WorkerLuaVm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpAllocatedGc int64 `protobuf:"varint,1,opt,name=http_allocated_gc,json=httpAllocatedGc,proto3" json:"http_allocated_gc,omitempty"`
	Pid             int64 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *MemoryStats_WorkerLuaVm) Reset() {
	*x = MemoryStats_WorkerLuaVm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryStats_WorkerLuaVm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStats_WorkerLuaVm) ProtoMessage() {}

func (x *MemoryStats_WorkerLuaVm) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStats_WorkerLuaVm.ProtoReflect.Descriptor instead.
func (*MemoryStats_WorkerLuaVm) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{26, 1}
}

func (x *MemoryStats_WorkerLuaVm) GetHttpAllocatedGc() int64 {
	if x != nil {
		return x.HttpAllocatedGc
	}
	return 0
}

func (x *MemoryStats_WorkerLuaVm) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type MemoryStats_LuaSharedDicts_DictStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocatedSlabs int64 `protobuf:"varint,1,opt,name=allocated_slabs,json=allocatedSlabs,proto3" json:"allocated_slabs,omitempty"`
	Capacity       int64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *MemoryStats_LuaSharedDicts_DictStats) Reset() {
	*x = MemoryStats_LuaSharedDicts_DictStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginsocket_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryStats_LuaSharedDicts_DictStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStats_LuaSharedDicts_DictStats) ProtoMessage() {}

func (x *MemoryStats_LuaSharedDicts_DictStats) ProtoReflect() protoreflect.Message {
	mi := &file_pluginsocket_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStats_LuaSharedDicts_DictStats.ProtoReflect.Descriptor instead.
func (*MemoryStats_LuaSharedDicts_DictStats) Descriptor() ([]byte, []int) {
	return file_pluginsocket_proto_rawDescGZIP(), []int{26, 0, 0}
}

func (x *MemoryStats_LuaSharedDicts_DictStats) GetAllocatedSlabs() int64 {
	if x != nil {
		return x.AllocatedSlabs
	}
	return 0
}

func (x *MemoryStats_LuaSharedDicts_DictStats) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

var file_pluginsocket_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50007,
		Name:          "kong_plugin_protocol.MethodName",
		Tag:           "bytes,50007,opt,name=MethodName",
		Filename:      "pluginsocket.proto",
	},
}

// Extension fields to descriptor.MethodOptions.
var (
	// optional string MethodName = 50007;
	E_MethodName = &file_pluginsocket_proto_extTypes[0]
)

var File_pluginsocket_proto protoreflect.FileDescriptor

var file_pluginsocket_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6d, 0x64, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x10,
	0x43, 0x6d, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x10, 0x43, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x37, 0x0a, 0x14, 0x43, 0x6d, 0x64, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a,
	0x10, 0x43, 0x6d, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x50, 0x0a, 0x0e, 0x43, 0x6d, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x04, 0x0a, 0x07, 0x52, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x14,
	0x63, 0x6d, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6f, 0x6e,
	0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x6d, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6d, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x63, 0x6d, 0x64, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6d, 0x64,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x10, 0x63, 0x6d, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6d, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6d, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x17, 0x63, 0x6d, 0x64,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x6f, 0x6e,
	0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x6d, 0x64, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6d, 0x64, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56,
	0x0a, 0x12, 0x63, 0x6d, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x6f, 0x6e,
	0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x6d, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6d, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x6d, 0x64, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6d, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6d, 0x64, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x22, 0x23, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x8f, 0x02, 0x0a, 0x09, 0x52, 0x70, 0x63, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x22, 0x38, 0x0a, 0x02, 0x4b, 0x56, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6b, 0x12, 0x24, 0x0a, 0x01, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x76, 0x22, 0x14, 0x0a,
	0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x01, 0x76, 0x22, 0x13, 0x0a, 0x03, 0x49, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x76, 0x22, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x76,
	0x22, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x76, 0x22, 0x69, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x31, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x22, 0x1c, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x20, 0x0a, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xb1, 0x04, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a,
	0x1a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x65, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x70, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x69, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6e, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b,
	0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x12,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x22, 0x30, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x3f, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x4a, 0x0a,
	0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xa2, 0x04, 0x0a, 0x0b, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x6c, 0x75, 0x61,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4c, 0x75, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x44, 0x69, 0x63, 0x74, 0x73, 0x52, 0x0e, 0x6c, 0x75, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x44, 0x69, 0x63, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x5f, 0x6c, 0x75, 0x61, 0x5f, 0x76, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x75, 0x61, 0x56, 0x6d, 0x52, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x4c, 0x75, 0x61, 0x56, 0x6d, 0x73, 0x1a, 0x92, 0x02, 0x0a,
	0x0e, 0x4c, 0x75, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x69, 0x63, 0x74, 0x73, 0x12,
	0x4e, 0x0a, 0x04, 0x6b, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x4c, 0x75, 0x61, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x69, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x04, 0x6b, 0x6f, 0x6e, 0x67, 0x12,
	0x5e, 0x0a, 0x0d, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4c, 0x75, 0x61, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x44, 0x69, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0b, 0x6b, 0x6f, 0x6e, 0x67, 0x44, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x1a,
	0x50, 0x0a, 0x09, 0x44, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x6c, 0x61, 0x62, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x1a, 0x4b, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x75, 0x61, 0x56, 0x6d,
	0x12, 0x2a, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x67, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68, 0x74, 0x74,
	0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x47, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x77,
	0x0a, 0x09, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x01, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01,
	0x6d, 0x1a, 0x34, 0x0a, 0x06, 0x4d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x03, 0x0a, 0x06, 0x50, 0x64, 0x6b, 0x41,
	0x72, 0x67, 0x12, 0x0e, 0x0a, 0x01, 0x62, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x01, 0x62, 0x12, 0x0e, 0x0a, 0x01, 0x69, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x01, 0x69, 0x12, 0x0e, 0x0a, 0x01, 0x66, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x01, 0x66, 0x12, 0x0e, 0x0a, 0x01, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x01, 0x73, 0x12, 0x2f, 0x0a, 0x01, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x48, 0x00,
	0x52, 0x01, 0x6d, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x6f,
	0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x84, 0x01, 0x0a, 0x07, 0x50,
	0x64, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x64, 0x6b, 0x41, 0x72, 0x67, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x84, 0x01, 0x0a, 0x09, 0x50, 0x64, 0x6b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x64, 0x6b,
	0x41, 0x72, 0x67, 0x52, 0x03, 0x61, 0x72, 0x67, 0x32, 0x83, 0x2c, 0x0a, 0x04, 0x4b, 0x6f, 0x6e,
	0x67, 0x12, 0x44, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x49,
	0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x70,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4f,
	0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x5d, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x2d, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x59,
	0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x1e, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x12, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e,
	0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5a,
	0x0a, 0x0d, 0x43, 0x74, 0x78, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12,
	0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b, 0x56, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x17, 0xba, 0xb5, 0x18, 0x13, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x63, 0x74, 0x78, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x65, 0x74, 0x12, 0x5e, 0x0a, 0x0d, 0x43, 0x74,
	0x78, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x2e, 0x6b, 0x6f,
	0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x17, 0xba, 0xb5, 0x18, 0x13, 0x6b, 0x6f, 0x6e, 0x67, 0x2e, 0x63, 0x74, 0x78, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x49, 0x70,
	0x5f, 0x49, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e,
	0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1a, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x3f, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x5f, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x5f, 0x43, 0x72, 0x69,
	0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x5f, 0x45, 0x72, 0x72,
	0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x5f, 0x57, 0x61, 0x72, 0x6e,
	0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x5f, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x5f, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x5f, 0x53,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b, 0x56, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x5f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f,
	0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x0c, 0x4e, 0x67, 0x69,
	0x6e, 0x78, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x17, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x47,
	0x65, 0x74, 0x54, 0x6c, 0x73, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0c, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x5f,
	0x53, 0x65, 0x74, 0x43, 0x74, 0x78, 0x12, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b, 0x56,
	0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x44,
	0x0a, 0x0c, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x74, 0x78, 0x12, 0x1c,
	0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x52, 0x65,
	0x71, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x12, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c,
	0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x50, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x21, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a,
	0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x1a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x50, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e,
	0x74, 0x12, 0x4e, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74,
	0x48, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x49, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c,
	0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x0f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x67, 0x12, 0x1c, 0x2e, 0x6b, 0x6f,
	0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x2e, 0x6b, 0x6f,
	0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x4f, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x48, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e,
	0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x12,
	0x50, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x49, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x49, 0x6e, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e,
	0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x46, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b,
	0x56, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x12, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b, 0x56, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4c, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x46, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x45, 0x78, 0x69, 0x74, 0x12, 0x1e, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x78, 0x69, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x46, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6b, 0x6f,
	0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x53, 0x65, 0x74, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x6b, 0x6f,
	0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x49, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x19,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x4f, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e,
	0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x53, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b, 0x56, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x41, 0x64, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x18, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b, 0x56, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x52, 0x61,
	0x77, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x1a, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x1a,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e,
	0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74,
	0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x53, 0x0a, 0x1b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1c, 0x2e, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x40,
	0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd7, 0x86, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x18, 0x5a, 0x16, 0x2e, 0x2f, 0x6b, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pluginsocket_proto_rawDescOnce sync.Once
	file_pluginsocket_proto_rawDescData = file_pluginsocket_proto_rawDesc
)

func file_pluginsocket_proto_rawDescGZIP() []byte {
	file_pluginsocket_proto_rawDescOnce.Do(func() {
		file_pluginsocket_proto_rawDescData = protoimpl.X.CompressGZIP(file_pluginsocket_proto_rawDescData)
	})
	return file_pluginsocket_proto_rawDescData
}

var file_pluginsocket_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_pluginsocket_proto_goTypes = []interface{}{
	(*CmdGetPluginNames)(nil),                    // 0: kong_plugin_protocol.CmdGetPluginNames
	(*CmdGetPluginInfo)(nil),                     // 1: kong_plugin_protocol.CmdGetPluginInfo
	(*CmdStartInstance)(nil),                     // 2: kong_plugin_protocol.CmdStartInstance
	(*CmdGetInstanceStatus)(nil),                 // 3: kong_plugin_protocol.CmdGetInstanceStatus
	(*CmdCloseInstance)(nil),                     // 4: kong_plugin_protocol.CmdCloseInstance
	(*CmdHandleEvent)(nil),                       // 5: kong_plugin_protocol.CmdHandleEvent
	(*RpcCall)(nil),                              // 6: kong_plugin_protocol.RpcCall
	(*PluginNames)(nil),                          // 7: kong_plugin_protocol.PluginNames
	(*PluginInfo)(nil),                           // 8: kong_plugin_protocol.PluginInfo
	(*InstanceStatus)(nil),                       // 9: kong_plugin_protocol.InstanceStatus
	(*RpcReturn)(nil),                            // 10: kong_plugin_protocol.RpcReturn
	(*KV)(nil),                                   // 11: kong_plugin_protocol.KV
	(*Bool)(nil),                                 // 12: kong_plugin_protocol.Bool
	(*Int)(nil),                                  // 13: kong_plugin_protocol.Int
	(*Number)(nil),                               // 14: kong_plugin_protocol.Number
	(*String)(nil),                               // 15: kong_plugin_protocol.String
	(*ExitArgs)(nil),                             // 16: kong_plugin_protocol.ExitArgs
	(*ServiceKey)(nil),                           // 17: kong_plugin_protocol.ServiceKey
	(*CertificateKey)(nil),                       // 18: kong_plugin_protocol.CertificateKey
	(*Route)(nil),                                // 19: kong_plugin_protocol.Route
	(*Service)(nil),                              // 20: kong_plugin_protocol.Service
	(*Target)(nil),                               // 21: kong_plugin_protocol.Target
	(*ConsumerSpec)(nil),                         // 22: kong_plugin_protocol.ConsumerSpec
	(*Consumer)(nil),                             // 23: kong_plugin_protocol.Consumer
	(*AuthenticatedCredential)(nil),              // 24: kong_plugin_protocol.AuthenticatedCredential
	(*AuthenticateArgs)(nil),                     // 25: kong_plugin_protocol.AuthenticateArgs
	(*MemoryStats)(nil),                          // 26: kong_plugin_protocol.MemoryStats
	(*StringMap)(nil),                            // 27: kong_plugin_protocol.StringMap
	(*PdkArg)(nil),                               // 28: kong_plugin_protocol.PdkArg
	(*PdkCall)(nil),                              // 29: kong_plugin_protocol.PdkCall
	(*PdkReturn)(nil),                            // 30: kong_plugin_protocol.PdkReturn
	(*MemoryStats_LuaSharedDicts)(nil),           // 31: kong_plugin_protocol.MemoryStats.LuaSharedDicts
	(*MemoryStats_WorkerLuaVm)(nil),              // 32: kong_plugin_protocol.MemoryStats.WorkerLuaVm
	(*MemoryStats_LuaSharedDicts_DictStats)(nil), // 33: kong_plugin_protocol.MemoryStats.LuaSharedDicts.DictStats
	nil,                              // 34: kong_plugin_protocol.StringMap.MEntry
	(*_struct.Value)(nil),            // 35: google.protobuf.Value
	(*_struct.Struct)(nil),           // 36: google.protobuf.Struct
	(*descriptor.MethodOptions)(nil), // 37: google.protobuf.MethodOptions
	(*empty.Empty)(nil),              // 38: google.protobuf.Empty
	(*_struct.ListValue)(nil),        // 39: google.protobuf.ListValue
}
var file_pluginsocket_proto_depIdxs = []int32{
	0,   // 0: kong_plugin_protocol.RpcCall.cmd_get_plugin_names:type_name -> kong_plugin_protocol.CmdGetPluginNames
	1,   // 1: kong_plugin_protocol.RpcCall.cmd_get_plugin_info:type_name -> kong_plugin_protocol.CmdGetPluginInfo
	2,   // 2: kong_plugin_protocol.RpcCall.cmd_start_instance:type_name -> kong_plugin_protocol.CmdStartInstance
	3,   // 3: kong_plugin_protocol.RpcCall.cmd_get_instance_status:type_name -> kong_plugin_protocol.CmdGetInstanceStatus
	4,   // 4: kong_plugin_protocol.RpcCall.cmd_close_instance:type_name -> kong_plugin_protocol.CmdCloseInstance
	5,   // 5: kong_plugin_protocol.RpcCall.cmd_handle_event:type_name -> kong_plugin_protocol.CmdHandleEvent
	35,  // 6: kong_plugin_protocol.InstanceStatus.config:type_name -> google.protobuf.Value
	7,   // 7: kong_plugin_protocol.RpcReturn.plugin_names:type_name -> kong_plugin_protocol.PluginNames
	8,   // 8: kong_plugin_protocol.RpcReturn.plugin_info:type_name -> kong_plugin_protocol.PluginInfo
	9,   // 9: kong_plugin_protocol.RpcReturn.instance_status:type_name -> kong_plugin_protocol.InstanceStatus
	35,  // 10: kong_plugin_protocol.KV.v:type_name -> google.protobuf.Value
	36,  // 11: kong_plugin_protocol.ExitArgs.headers:type_name -> google.protobuf.Struct
	17,  // 12: kong_plugin_protocol.Route.service:type_name -> kong_plugin_protocol.ServiceKey
	18,  // 13: kong_plugin_protocol.Service.client_certificate:type_name -> kong_plugin_protocol.CertificateKey
	23,  // 14: kong_plugin_protocol.AuthenticateArgs.consumer:type_name -> kong_plugin_protocol.Consumer
	24,  // 15: kong_plugin_protocol.AuthenticateArgs.credential:type_name -> kong_plugin_protocol.AuthenticatedCredential
	31,  // 16: kong_plugin_protocol.MemoryStats.lua_shared_dicts:type_name -> kong_plugin_protocol.MemoryStats.LuaSharedDicts
	32,  // 17: kong_plugin_protocol.MemoryStats.workers_lua_vms:type_name -> kong_plugin_protocol.MemoryStats.WorkerLuaVm
	34,  // 18: kong_plugin_protocol.StringMap.m:type_name -> kong_plugin_protocol.StringMap.MEntry
	27,  // 19: kong_plugin_protocol.PdkArg.m:type_name -> kong_plugin_protocol.StringMap
	24,  // 20: kong_plugin_protocol.PdkArg.credential:type_name -> kong_plugin_protocol.AuthenticatedCredential
	19,  // 21: kong_plugin_protocol.PdkArg.route:type_name -> kong_plugin_protocol.Route
	20,  // 22: kong_plugin_protocol.PdkArg.service:type_name -> kong_plugin_protocol.Service
	23,  // 23: kong_plugin_protocol.PdkArg.consumer:type_name -> kong_plugin_protocol.Consumer
	26,  // 24: kong_plugin_protocol.PdkArg.memory_stats:type_name -> kong_plugin_protocol.MemoryStats
	28,  // 25: kong_plugin_protocol.PdkCall.args:type_name -> kong_plugin_protocol.PdkArg
	28,  // 26: kong_plugin_protocol.PdkReturn.arg:type_name -> kong_plugin_protocol.PdkArg
	33,  // 27: kong_plugin_protocol.MemoryStats.LuaSharedDicts.kong:type_name -> kong_plugin_protocol.MemoryStats.LuaSharedDicts.DictStats
	33,  // 28: kong_plugin_protocol.MemoryStats.LuaSharedDicts.kong_db_cache:type_name -> kong_plugin_protocol.MemoryStats.LuaSharedDicts.DictStats
	37,  // 29: kong_plugin_protocol.MethodName:extendee -> google.protobuf.MethodOptions
	38,  // 30: kong_plugin_protocol.Kong.Client_GetIp:input_type -> google.protobuf.Empty
	38,  // 31: kong_plugin_protocol.Kong.Client_GetForwardedIp:input_type -> google.protobuf.Empty
	38,  // 32: kong_plugin_protocol.Kong.Client_GetPort:input_type -> google.protobuf.Empty
	38,  // 33: kong_plugin_protocol.Kong.Client_GetForwardedPort:input_type -> google.protobuf.Empty
	38,  // 34: kong_plugin_protocol.Kong.Client_GetCredential:input_type -> google.protobuf.Empty
	22,  // 35: kong_plugin_protocol.Kong.Client_LoadConsumer:input_type -> kong_plugin_protocol.ConsumerSpec
	38,  // 36: kong_plugin_protocol.Kong.Client_GetConsumer:input_type -> google.protobuf.Empty
	25,  // 37: kong_plugin_protocol.Kong.Client_Authenticate:input_type -> kong_plugin_protocol.AuthenticateArgs
	12,  // 38: kong_plugin_protocol.Kong.Client_GetProtocol:input_type -> kong_plugin_protocol.Bool
	11,  // 39: kong_plugin_protocol.Kong.Ctx_SetShared:input_type -> kong_plugin_protocol.KV
	15,  // 40: kong_plugin_protocol.Kong.Ctx_GetShared:input_type -> kong_plugin_protocol.String
	15,  // 41: kong_plugin_protocol.Kong.Ip_IsTrusted:input_type -> kong_plugin_protocol.String
	39,  // 42: kong_plugin_protocol.Kong.Log_Alert:input_type -> google.protobuf.ListValue
	39,  // 43: kong_plugin_protocol.Kong.Log_Crit:input_type -> google.protobuf.ListValue
	39,  // 44: kong_plugin_protocol.Kong.Log_Err:input_type -> google.protobuf.ListValue
	39,  // 45: kong_plugin_protocol.Kong.Log_Warn:input_type -> google.protobuf.ListValue
	39,  // 46: kong_plugin_protocol.Kong.Log_Notice:input_type -> google.protobuf.ListValue
	39,  // 47: kong_plugin_protocol.Kong.Log_Info:input_type -> google.protobuf.ListValue
	39,  // 48: kong_plugin_protocol.Kong.Log_Debug:input_type -> google.protobuf.ListValue
	11,  // 49: kong_plugin_protocol.Kong.Log_SetSerializeValue:input_type -> kong_plugin_protocol.KV
	38,  // 50: kong_plugin_protocol.Kong.Log_Serialize:input_type -> google.protobuf.Empty
	15,  // 51: kong_plugin_protocol.Kong.Nginx_GetVar:input_type -> kong_plugin_protocol.String
	38,  // 52: kong_plugin_protocol.Kong.Nginx_GetTls1VersionStr:input_type -> google.protobuf.Empty
	11,  // 53: kong_plugin_protocol.Kong.Nginx_SetCtx:input_type -> kong_plugin_protocol.KV
	15,  // 54: kong_plugin_protocol.Kong.Nginx_GetCtx:input_type -> kong_plugin_protocol.String
	38,  // 55: kong_plugin_protocol.Kong.Nginx_ReqStartTime:input_type -> google.protobuf.Empty
	38,  // 56: kong_plugin_protocol.Kong.Nginx_GetSubsystem:input_type -> google.protobuf.Empty
	38,  // 57: kong_plugin_protocol.Kong.Node_GetId:input_type -> google.protobuf.Empty
	38,  // 58: kong_plugin_protocol.Kong.Node_GetMemoryStats:input_type -> google.protobuf.Empty
	38,  // 59: kong_plugin_protocol.Kong.Request_GetScheme:input_type -> google.protobuf.Empty
	38,  // 60: kong_plugin_protocol.Kong.Request_GetHost:input_type -> google.protobuf.Empty
	38,  // 61: kong_plugin_protocol.Kong.Request_GetPort:input_type -> google.protobuf.Empty
	38,  // 62: kong_plugin_protocol.Kong.Request_GetForwardedScheme:input_type -> google.protobuf.Empty
	38,  // 63: kong_plugin_protocol.Kong.Request_GetForwardedHost:input_type -> google.protobuf.Empty
	38,  // 64: kong_plugin_protocol.Kong.Request_GetForwardedPort:input_type -> google.protobuf.Empty
	38,  // 65: kong_plugin_protocol.Kong.Request_GetHttpVersion:input_type -> google.protobuf.Empty
	38,  // 66: kong_plugin_protocol.Kong.Request_GetMethod:input_type -> google.protobuf.Empty
	38,  // 67: kong_plugin_protocol.Kong.Request_GetPath:input_type -> google.protobuf.Empty
	38,  // 68: kong_plugin_protocol.Kong.Request_GetPathWithQuery:input_type -> google.protobuf.Empty
	38,  // 69: kong_plugin_protocol.Kong.Request_GetRawQuery:input_type -> google.protobuf.Empty
	15,  // 70: kong_plugin_protocol.Kong.Request_GetQueryArg:input_type -> kong_plugin_protocol.String
	13,  // 71: kong_plugin_protocol.Kong.Request_GetQuery:input_type -> kong_plugin_protocol.Int
	15,  // 72: kong_plugin_protocol.Kong.Request_GetHeader:input_type -> kong_plugin_protocol.String
	13,  // 73: kong_plugin_protocol.Kong.Request_GetHeaders:input_type -> kong_plugin_protocol.Int
	38,  // 74: kong_plugin_protocol.Kong.Request_GetRawBody:input_type -> google.protobuf.Empty
	38,  // 75: kong_plugin_protocol.Kong.Response_GetStatus:input_type -> google.protobuf.Empty
	15,  // 76: kong_plugin_protocol.Kong.Response_GetHeader:input_type -> kong_plugin_protocol.String
	13,  // 77: kong_plugin_protocol.Kong.Response_GetHeaders:input_type -> kong_plugin_protocol.Int
	38,  // 78: kong_plugin_protocol.Kong.Response_GetSource:input_type -> google.protobuf.Empty
	13,  // 79: kong_plugin_protocol.Kong.Response_SetStatus:input_type -> kong_plugin_protocol.Int
	11,  // 80: kong_plugin_protocol.Kong.Response_SetHeader:input_type -> kong_plugin_protocol.KV
	11,  // 81: kong_plugin_protocol.Kong.Response_AddHeader:input_type -> kong_plugin_protocol.KV
	15,  // 82: kong_plugin_protocol.Kong.Response_ClearHeader:input_type -> kong_plugin_protocol.String
	36,  // 83: kong_plugin_protocol.Kong.Response_SetHeaders:input_type -> google.protobuf.Struct
	16,  // 84: kong_plugin_protocol.Kong.Response_Exit:input_type -> kong_plugin_protocol.ExitArgs
	38,  // 85: kong_plugin_protocol.Kong.Router_GetRoute:input_type -> google.protobuf.Empty
	38,  // 86: kong_plugin_protocol.Kong.Router_GetService:input_type -> google.protobuf.Empty
	15,  // 87: kong_plugin_protocol.Kong.Service_SetUpstream:input_type -> kong_plugin_protocol.String
	21,  // 88: kong_plugin_protocol.Kong.Service_SetTarget:input_type -> kong_plugin_protocol.Target
	15,  // 89: kong_plugin_protocol.Kong.Service_Request_SetScheme:input_type -> kong_plugin_protocol.String
	15,  // 90: kong_plugin_protocol.Kong.Service_Request_SetPath:input_type -> kong_plugin_protocol.String
	15,  // 91: kong_plugin_protocol.Kong.Service_Request_SetRawQuery:input_type -> kong_plugin_protocol.String
	15,  // 92: kong_plugin_protocol.Kong.Service_Request_SetMethod:input_type -> kong_plugin_protocol.String
	36,  // 93: kong_plugin_protocol.Kong.Service_Request_SetQuery:input_type -> google.protobuf.Struct
	11,  // 94: kong_plugin_protocol.Kong.Service_Request_SetHeader:input_type -> kong_plugin_protocol.KV
	11,  // 95: kong_plugin_protocol.Kong.Service_Request_AddHeader:input_type -> kong_plugin_protocol.KV
	15,  // 96: kong_plugin_protocol.Kong.Service_Request_ClearHeader:input_type -> kong_plugin_protocol.String
	36,  // 97: kong_plugin_protocol.Kong.Service_Request_SetHeaders:input_type -> google.protobuf.Struct
	15,  // 98: kong_plugin_protocol.Kong.Service_Request_SetRawBody:input_type -> kong_plugin_protocol.String
	38,  // 99: kong_plugin_protocol.Kong.Service_Response_GetStatus:input_type -> google.protobuf.Empty
	15,  // 100: kong_plugin_protocol.Kong.Service_Response_GetHeader:input_type -> kong_plugin_protocol.String
	13,  // 101: kong_plugin_protocol.Kong.Service_Response_GetHeaders:input_type -> kong_plugin_protocol.Int
	38,  // 102: kong_plugin_protocol.Kong.Service_Response_GetRawBody:input_type -> google.protobuf.Empty
	15,  // 103: kong_plugin_protocol.Kong.Client_GetIp:output_type -> kong_plugin_protocol.String
	15,  // 104: kong_plugin_protocol.Kong.Client_GetForwardedIp:output_type -> kong_plugin_protocol.String
	15,  // 105: kong_plugin_protocol.Kong.Client_GetPort:output_type -> kong_plugin_protocol.String
	15,  // 106: kong_plugin_protocol.Kong.Client_GetForwardedPort:output_type -> kong_plugin_protocol.String
	24,  // 107: kong_plugin_protocol.Kong.Client_GetCredential:output_type -> kong_plugin_protocol.AuthenticatedCredential
	23,  // 108: kong_plugin_protocol.Kong.Client_LoadConsumer:output_type -> kong_plugin_protocol.Consumer
	23,  // 109: kong_plugin_protocol.Kong.Client_GetConsumer:output_type -> kong_plugin_protocol.Consumer
	38,  // 110: kong_plugin_protocol.Kong.Client_Authenticate:output_type -> google.protobuf.Empty
	15,  // 111: kong_plugin_protocol.Kong.Client_GetProtocol:output_type -> kong_plugin_protocol.String
	38,  // 112: kong_plugin_protocol.Kong.Ctx_SetShared:output_type -> google.protobuf.Empty
	35,  // 113: kong_plugin_protocol.Kong.Ctx_GetShared:output_type -> google.protobuf.Value
	12,  // 114: kong_plugin_protocol.Kong.Ip_IsTrusted:output_type -> kong_plugin_protocol.Bool
	38,  // 115: kong_plugin_protocol.Kong.Log_Alert:output_type -> google.protobuf.Empty
	38,  // 116: kong_plugin_protocol.Kong.Log_Crit:output_type -> google.protobuf.Empty
	38,  // 117: kong_plugin_protocol.Kong.Log_Err:output_type -> google.protobuf.Empty
	38,  // 118: kong_plugin_protocol.Kong.Log_Warn:output_type -> google.protobuf.Empty
	38,  // 119: kong_plugin_protocol.Kong.Log_Notice:output_type -> google.protobuf.Empty
	38,  // 120: kong_plugin_protocol.Kong.Log_Info:output_type -> google.protobuf.Empty
	38,  // 121: kong_plugin_protocol.Kong.Log_Debug:output_type -> google.protobuf.Empty
	38,  // 122: kong_plugin_protocol.Kong.Log_SetSerializeValue:output_type -> google.protobuf.Empty
	15,  // 123: kong_plugin_protocol.Kong.Log_Serialize:output_type -> kong_plugin_protocol.String
	15,  // 124: kong_plugin_protocol.Kong.Nginx_GetVar:output_type -> kong_plugin_protocol.String
	15,  // 125: kong_plugin_protocol.Kong.Nginx_GetTls1VersionStr:output_type -> kong_plugin_protocol.String
	15,  // 126: kong_plugin_protocol.Kong.Nginx_SetCtx:output_type -> kong_plugin_protocol.String
	35,  // 127: kong_plugin_protocol.Kong.Nginx_GetCtx:output_type -> google.protobuf.Value
	14,  // 128: kong_plugin_protocol.Kong.Nginx_ReqStartTime:output_type -> kong_plugin_protocol.Number
	15,  // 129: kong_plugin_protocol.Kong.Nginx_GetSubsystem:output_type -> kong_plugin_protocol.String
	15,  // 130: kong_plugin_protocol.Kong.Node_GetId:output_type -> kong_plugin_protocol.String
	26,  // 131: kong_plugin_protocol.Kong.Node_GetMemoryStats:output_type -> kong_plugin_protocol.MemoryStats
	15,  // 132: kong_plugin_protocol.Kong.Request_GetScheme:output_type -> kong_plugin_protocol.String
	15,  // 133: kong_plugin_protocol.Kong.Request_GetHost:output_type -> kong_plugin_protocol.String
	13,  // 134: kong_plugin_protocol.Kong.Request_GetPort:output_type -> kong_plugin_protocol.Int
	15,  // 135: kong_plugin_protocol.Kong.Request_GetForwardedScheme:output_type -> kong_plugin_protocol.String
	15,  // 136: kong_plugin_protocol.Kong.Request_GetForwardedHost:output_type -> kong_plugin_protocol.String
	13,  // 137: kong_plugin_protocol.Kong.Request_GetForwardedPort:output_type -> kong_plugin_protocol.Int
	14,  // 138: kong_plugin_protocol.Kong.Request_GetHttpVersion:output_type -> kong_plugin_protocol.Number
	15,  // 139: kong_plugin_protocol.Kong.Request_GetMethod:output_type -> kong_plugin_protocol.String
	15,  // 140: kong_plugin_protocol.Kong.Request_GetPath:output_type -> kong_plugin_protocol.String
	15,  // 141: kong_plugin_protocol.Kong.Request_GetPathWithQuery:output_type -> kong_plugin_protocol.String
	15,  // 142: kong_plugin_protocol.Kong.Request_GetRawQuery:output_type -> kong_plugin_protocol.String
	15,  // 143: kong_plugin_protocol.Kong.Request_GetQueryArg:output_type -> kong_plugin_protocol.String
	36,  // 144: kong_plugin_protocol.Kong.Request_GetQuery:output_type -> google.protobuf.Struct
	15,  // 145: kong_plugin_protocol.Kong.Request_GetHeader:output_type -> kong_plugin_protocol.String
	36,  // 146: kong_plugin_protocol.Kong.Request_GetHeaders:output_type -> google.protobuf.Struct
	15,  // 147: kong_plugin_protocol.Kong.Request_GetRawBody:output_type -> kong_plugin_protocol.String
	13,  // 148: kong_plugin_protocol.Kong.Response_GetStatus:output_type -> kong_plugin_protocol.Int
	15,  // 149: kong_plugin_protocol.Kong.Response_GetHeader:output_type -> kong_plugin_protocol.String
	36,  // 150: kong_plugin_protocol.Kong.Response_GetHeaders:output_type -> google.protobuf.Struct
	15,  // 151: kong_plugin_protocol.Kong.Response_GetSource:output_type -> kong_plugin_protocol.String
	38,  // 152: kong_plugin_protocol.Kong.Response_SetStatus:output_type -> google.protobuf.Empty
	38,  // 153: kong_plugin_protocol.Kong.Response_SetHeader:output_type -> google.protobuf.Empty
	38,  // 154: kong_plugin_protocol.Kong.Response_AddHeader:output_type -> google.protobuf.Empty
	38,  // 155: kong_plugin_protocol.Kong.Response_ClearHeader:output_type -> google.protobuf.Empty
	38,  // 156: kong_plugin_protocol.Kong.Response_SetHeaders:output_type -> google.protobuf.Empty
	38,  // 157: kong_plugin_protocol.Kong.Response_Exit:output_type -> google.protobuf.Empty
	19,  // 158: kong_plugin_protocol.Kong.Router_GetRoute:output_type -> kong_plugin_protocol.Route
	20,  // 159: kong_plugin_protocol.Kong.Router_GetService:output_type -> kong_plugin_protocol.Service
	38,  // 160: kong_plugin_protocol.Kong.Service_SetUpstream:output_type -> google.protobuf.Empty
	38,  // 161: kong_plugin_protocol.Kong.Service_SetTarget:output_type -> google.protobuf.Empty
	38,  // 162: kong_plugin_protocol.Kong.Service_Request_SetScheme:output_type -> google.protobuf.Empty
	38,  // 163: kong_plugin_protocol.Kong.Service_Request_SetPath:output_type -> google.protobuf.Empty
	38,  // 164: kong_plugin_protocol.Kong.Service_Request_SetRawQuery:output_type -> google.protobuf.Empty
	38,  // 165: kong_plugin_protocol.Kong.Service_Request_SetMethod:output_type -> google.protobuf.Empty
	38,  // 166: kong_plugin_protocol.Kong.Service_Request_SetQuery:output_type -> google.protobuf.Empty
	38,  // 167: kong_plugin_protocol.Kong.Service_Request_SetHeader:output_type -> google.protobuf.Empty
	38,  // 168: kong_plugin_protocol.Kong.Service_Request_AddHeader:output_type -> google.protobuf.Empty
	38,  // 169: kong_plugin_protocol.Kong.Service_Request_ClearHeader:output_type -> google.protobuf.Empty
	38,  // 170: kong_plugin_protocol.Kong.Service_Request_SetHeaders:output_type -> google.protobuf.Empty
	38,  // 171: kong_plugin_protocol.Kong.Service_Request_SetRawBody:output_type -> google.protobuf.Empty
	13,  // 172: kong_plugin_protocol.Kong.Service_Response_GetStatus:output_type -> kong_plugin_protocol.Int
	15,  // 173: kong_plugin_protocol.Kong.Service_Response_GetHeader:output_type -> kong_plugin_protocol.String
	36,  // 174: kong_plugin_protocol.Kong.Service_Response_GetHeaders:output_type -> google.protobuf.Struct
	15,  // 175: kong_plugin_protocol.Kong.Service_Response_GetRawBody:output_type -> kong_plugin_protocol.String
	103, // [103:176] is the sub-list for method output_type
	30,  // [30:103] is the sub-list for method input_type
	30,  // [30:30] is the sub-list for extension type_name
	29,  // [29:30] is the sub-list for extension extendee
	0,   // [0:29] is the sub-list for field type_name
}

func init() { file_pluginsocket_proto_init() }
func file_pluginsocket_proto_init() {
	if File_pluginsocket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pluginsocket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdGetPluginNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdGetPluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdStartInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdGetInstanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdCloseInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdHandleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Number); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatedCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdkArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdkCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdkReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryStats_LuaSharedDicts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryStats_WorkerLuaVm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginsocket_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryStats_LuaSharedDicts_DictStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pluginsocket_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*RpcCall_CmdGetPluginNames)(nil),
		(*RpcCall_CmdGetPluginInfo)(nil),
		(*RpcCall_CmdStartInstance)(nil),
		(*RpcCall_CmdGetInstanceStatus)(nil),
		(*RpcCall_CmdCloseInstance)(nil),
		(*RpcCall_CmdHandleEvent)(nil),
	}
	file_pluginsocket_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RpcReturn_PluginNames)(nil),
		(*RpcReturn_PluginInfo)(nil),
		(*RpcReturn_InstanceStatus)(nil),
	}
	file_pluginsocket_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*PdkArg_B)(nil),
		(*PdkArg_I)(nil),
		(*PdkArg_F)(nil),
		(*PdkArg_S)(nil),
		(*PdkArg_M)(nil),
		(*PdkArg_Error)(nil),
		(*PdkArg_Credential)(nil),
		(*PdkArg_Route)(nil),
		(*PdkArg_Service)(nil),
		(*PdkArg_Consumer)(nil),
		(*PdkArg_MemoryStats)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pluginsocket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 1,
			NumServices:   1,
		},
		GoTypes:           file_pluginsocket_proto_goTypes,
		DependencyIndexes: file_pluginsocket_proto_depIdxs,
		MessageInfos:      file_pluginsocket_proto_msgTypes,
		ExtensionInfos:    file_pluginsocket_proto_extTypes,
	}.Build()
	File_pluginsocket_proto = out.File
	file_pluginsocket_proto_rawDesc = nil
	file_pluginsocket_proto_goTypes = nil
	file_pluginsocket_proto_depIdxs = nil
}
