// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kong_plugin_protocol

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KongClient is the client API for Kong service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KongClient interface {
	Client_GetIp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Client_GetForwardedIp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Client_GetPort(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Client_GetForwardedPort(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Client_GetCredential(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthenticatedCredential, error)
	Client_LoadConsumer(ctx context.Context, in *ConsumerSpec, opts ...grpc.CallOption) (*Consumer, error)
	Client_GetConsumer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Consumer, error)
	Client_Authenticate(ctx context.Context, in *AuthenticateArgs, opts ...grpc.CallOption) (*empty.Empty, error)
	Client_GetProtocol(ctx context.Context, in *Bool, opts ...grpc.CallOption) (*String, error)
	Ctx_SetShared(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error)
	Ctx_GetShared(ctx context.Context, in *String, opts ...grpc.CallOption) (*_struct.Value, error)
	Ip_IsTrusted(ctx context.Context, in *String, opts ...grpc.CallOption) (*Bool, error)
	Log_Alert(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error)
	Log_Crit(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error)
	Log_Err(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error)
	Log_Warn(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error)
	Log_Notice(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error)
	Log_Info(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error)
	Log_Debug(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error)
	Log_SetSerializeValue(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error)
	Log_Serialize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Nginx_GetVar(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	Nginx_GetTls1VersionStr(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Nginx_SetCtx(ctx context.Context, in *KV, opts ...grpc.CallOption) (*String, error)
	Nginx_GetCtx(ctx context.Context, in *String, opts ...grpc.CallOption) (*_struct.Value, error)
	Nginx_ReqStartTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Number, error)
	Nginx_GetSubsystem(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Node_GetId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Node_GetMemoryStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MemoryStats, error)
	Request_GetScheme(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Request_GetHost(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Request_GetPort(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Int, error)
	Request_GetForwardedScheme(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Request_GetForwardedHost(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Request_GetForwardedPort(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Int, error)
	Request_GetHttpVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Number, error)
	Request_GetMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Request_GetPath(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Request_GetPathWithQuery(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Request_GetRawQuery(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Request_GetQueryArg(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	Request_GetQuery(ctx context.Context, in *Int, opts ...grpc.CallOption) (*_struct.Struct, error)
	Request_GetHeader(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	Request_GetHeaders(ctx context.Context, in *Int, opts ...grpc.CallOption) (*_struct.Struct, error)
	Request_GetRawBody(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Response_GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Int, error)
	Response_GetHeader(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	Response_GetHeaders(ctx context.Context, in *Int, opts ...grpc.CallOption) (*_struct.Struct, error)
	Response_GetSource(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	Response_SetStatus(ctx context.Context, in *Int, opts ...grpc.CallOption) (*empty.Empty, error)
	Response_SetHeader(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error)
	Response_AddHeader(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error)
	Response_ClearHeader(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error)
	Response_SetHeaders(ctx context.Context, in *_struct.Struct, opts ...grpc.CallOption) (*empty.Empty, error)
	Response_Exit(ctx context.Context, in *ExitArgs, opts ...grpc.CallOption) (*empty.Empty, error)
	Router_GetRoute(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Route, error)
	Router_GetService(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Service, error)
	Service_SetUpstream(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_SetTarget(ctx context.Context, in *Target, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Request_SetScheme(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Request_SetPath(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Request_SetRawQuery(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Request_SetMethod(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Request_SetQuery(ctx context.Context, in *_struct.Struct, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Request_SetHeader(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Request_AddHeader(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Request_ClearHeader(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Request_SetHeaders(ctx context.Context, in *_struct.Struct, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Request_SetRawBody(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error)
	Service_Response_GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Int, error)
	Service_Response_GetHeader(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	Service_Response_GetHeaders(ctx context.Context, in *Int, opts ...grpc.CallOption) (*_struct.Struct, error)
	Service_Response_GetRawBody(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
}

type kongClient struct {
	cc grpc.ClientConnInterface
}

func NewKongClient(cc grpc.ClientConnInterface) KongClient {
	return &kongClient{cc}
}

func (c *kongClient) Client_GetIp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Client_GetIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Client_GetForwardedIp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Client_GetForwardedIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Client_GetPort(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Client_GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Client_GetForwardedPort(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Client_GetForwardedPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Client_GetCredential(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthenticatedCredential, error) {
	out := new(AuthenticatedCredential)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Client_GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Client_LoadConsumer(ctx context.Context, in *ConsumerSpec, opts ...grpc.CallOption) (*Consumer, error) {
	out := new(Consumer)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Client_LoadConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Client_GetConsumer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Consumer, error) {
	out := new(Consumer)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Client_GetConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Client_Authenticate(ctx context.Context, in *AuthenticateArgs, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Client_Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Client_GetProtocol(ctx context.Context, in *Bool, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Client_GetProtocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Ctx_SetShared(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Ctx_SetShared", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Ctx_GetShared(ctx context.Context, in *String, opts ...grpc.CallOption) (*_struct.Value, error) {
	out := new(_struct.Value)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Ctx_GetShared", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Ip_IsTrusted(ctx context.Context, in *String, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Ip_IsTrusted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Log_Alert(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Log_Alert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Log_Crit(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Log_Crit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Log_Err(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Log_Err", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Log_Warn(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Log_Warn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Log_Notice(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Log_Notice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Log_Info(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Log_Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Log_Debug(ctx context.Context, in *_struct.ListValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Log_Debug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Log_SetSerializeValue(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Log_SetSerializeValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Log_Serialize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Log_Serialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Nginx_GetVar(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Nginx_GetVar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Nginx_GetTls1VersionStr(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Nginx_GetTls1VersionStr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Nginx_SetCtx(ctx context.Context, in *KV, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Nginx_SetCtx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Nginx_GetCtx(ctx context.Context, in *String, opts ...grpc.CallOption) (*_struct.Value, error) {
	out := new(_struct.Value)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Nginx_GetCtx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Nginx_ReqStartTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Nginx_ReqStartTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Nginx_GetSubsystem(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Nginx_GetSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Node_GetId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Node_GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Node_GetMemoryStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MemoryStats, error) {
	out := new(MemoryStats)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Node_GetMemoryStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetScheme(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetScheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetHost(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetPort(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Int, error) {
	out := new(Int)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetForwardedScheme(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetForwardedScheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetForwardedHost(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetForwardedHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetForwardedPort(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Int, error) {
	out := new(Int)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetForwardedPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetHttpVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetHttpVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetPath(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetPathWithQuery(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetPathWithQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetRawQuery(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetRawQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetQueryArg(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetQueryArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetQuery(ctx context.Context, in *Int, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetHeader(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetHeaders(ctx context.Context, in *Int, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Request_GetRawBody(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Request_GetRawBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Response_GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Int, error) {
	out := new(Int)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Response_GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Response_GetHeader(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Response_GetHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Response_GetHeaders(ctx context.Context, in *Int, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Response_GetHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Response_GetSource(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Response_GetSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Response_SetStatus(ctx context.Context, in *Int, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Response_SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Response_SetHeader(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Response_SetHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Response_AddHeader(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Response_AddHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Response_ClearHeader(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Response_ClearHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Response_SetHeaders(ctx context.Context, in *_struct.Struct, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Response_SetHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Response_Exit(ctx context.Context, in *ExitArgs, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Response_Exit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Router_GetRoute(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Router_GetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Router_GetService(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Router_GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_SetUpstream(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_SetUpstream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_SetTarget(ctx context.Context, in *Target, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_SetTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Request_SetScheme(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Request_SetScheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Request_SetPath(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Request_SetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Request_SetRawQuery(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Request_SetRawQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Request_SetMethod(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Request_SetMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Request_SetQuery(ctx context.Context, in *_struct.Struct, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Request_SetQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Request_SetHeader(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Request_SetHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Request_AddHeader(ctx context.Context, in *KV, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Request_AddHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Request_ClearHeader(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Request_ClearHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Request_SetHeaders(ctx context.Context, in *_struct.Struct, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Request_SetHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Request_SetRawBody(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Request_SetRawBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Response_GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Int, error) {
	out := new(Int)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Response_GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Response_GetHeader(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Response_GetHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Response_GetHeaders(ctx context.Context, in *Int, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Response_GetHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kongClient) Service_Response_GetRawBody(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/kong_plugin_protocol.Kong/Service_Response_GetRawBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KongServer is the server API for Kong service.
// All implementations must embed UnimplementedKongServer
// for forward compatibility
type KongServer interface {
	Client_GetIp(context.Context, *empty.Empty) (*String, error)
	Client_GetForwardedIp(context.Context, *empty.Empty) (*String, error)
	Client_GetPort(context.Context, *empty.Empty) (*String, error)
	Client_GetForwardedPort(context.Context, *empty.Empty) (*String, error)
	Client_GetCredential(context.Context, *empty.Empty) (*AuthenticatedCredential, error)
	Client_LoadConsumer(context.Context, *ConsumerSpec) (*Consumer, error)
	Client_GetConsumer(context.Context, *empty.Empty) (*Consumer, error)
	Client_Authenticate(context.Context, *AuthenticateArgs) (*empty.Empty, error)
	Client_GetProtocol(context.Context, *Bool) (*String, error)
	Ctx_SetShared(context.Context, *KV) (*empty.Empty, error)
	Ctx_GetShared(context.Context, *String) (*_struct.Value, error)
	Ip_IsTrusted(context.Context, *String) (*Bool, error)
	Log_Alert(context.Context, *_struct.ListValue) (*empty.Empty, error)
	Log_Crit(context.Context, *_struct.ListValue) (*empty.Empty, error)
	Log_Err(context.Context, *_struct.ListValue) (*empty.Empty, error)
	Log_Warn(context.Context, *_struct.ListValue) (*empty.Empty, error)
	Log_Notice(context.Context, *_struct.ListValue) (*empty.Empty, error)
	Log_Info(context.Context, *_struct.ListValue) (*empty.Empty, error)
	Log_Debug(context.Context, *_struct.ListValue) (*empty.Empty, error)
	Log_SetSerializeValue(context.Context, *KV) (*empty.Empty, error)
	Log_Serialize(context.Context, *empty.Empty) (*String, error)
	Nginx_GetVar(context.Context, *String) (*String, error)
	Nginx_GetTls1VersionStr(context.Context, *empty.Empty) (*String, error)
	Nginx_SetCtx(context.Context, *KV) (*String, error)
	Nginx_GetCtx(context.Context, *String) (*_struct.Value, error)
	Nginx_ReqStartTime(context.Context, *empty.Empty) (*Number, error)
	Nginx_GetSubsystem(context.Context, *empty.Empty) (*String, error)
	Node_GetId(context.Context, *empty.Empty) (*String, error)
	Node_GetMemoryStats(context.Context, *empty.Empty) (*MemoryStats, error)
	Request_GetScheme(context.Context, *empty.Empty) (*String, error)
	Request_GetHost(context.Context, *empty.Empty) (*String, error)
	Request_GetPort(context.Context, *empty.Empty) (*Int, error)
	Request_GetForwardedScheme(context.Context, *empty.Empty) (*String, error)
	Request_GetForwardedHost(context.Context, *empty.Empty) (*String, error)
	Request_GetForwardedPort(context.Context, *empty.Empty) (*Int, error)
	Request_GetHttpVersion(context.Context, *empty.Empty) (*Number, error)
	Request_GetMethod(context.Context, *empty.Empty) (*String, error)
	Request_GetPath(context.Context, *empty.Empty) (*String, error)
	Request_GetPathWithQuery(context.Context, *empty.Empty) (*String, error)
	Request_GetRawQuery(context.Context, *empty.Empty) (*String, error)
	Request_GetQueryArg(context.Context, *String) (*String, error)
	Request_GetQuery(context.Context, *Int) (*_struct.Struct, error)
	Request_GetHeader(context.Context, *String) (*String, error)
	Request_GetHeaders(context.Context, *Int) (*_struct.Struct, error)
	Request_GetRawBody(context.Context, *empty.Empty) (*String, error)
	Response_GetStatus(context.Context, *empty.Empty) (*Int, error)
	Response_GetHeader(context.Context, *String) (*String, error)
	Response_GetHeaders(context.Context, *Int) (*_struct.Struct, error)
	Response_GetSource(context.Context, *empty.Empty) (*String, error)
	Response_SetStatus(context.Context, *Int) (*empty.Empty, error)
	Response_SetHeader(context.Context, *KV) (*empty.Empty, error)
	Response_AddHeader(context.Context, *KV) (*empty.Empty, error)
	Response_ClearHeader(context.Context, *String) (*empty.Empty, error)
	Response_SetHeaders(context.Context, *_struct.Struct) (*empty.Empty, error)
	Response_Exit(context.Context, *ExitArgs) (*empty.Empty, error)
	Router_GetRoute(context.Context, *empty.Empty) (*Route, error)
	Router_GetService(context.Context, *empty.Empty) (*Service, error)
	Service_SetUpstream(context.Context, *String) (*empty.Empty, error)
	Service_SetTarget(context.Context, *Target) (*empty.Empty, error)
	Service_Request_SetScheme(context.Context, *String) (*empty.Empty, error)
	Service_Request_SetPath(context.Context, *String) (*empty.Empty, error)
	Service_Request_SetRawQuery(context.Context, *String) (*empty.Empty, error)
	Service_Request_SetMethod(context.Context, *String) (*empty.Empty, error)
	Service_Request_SetQuery(context.Context, *_struct.Struct) (*empty.Empty, error)
	Service_Request_SetHeader(context.Context, *KV) (*empty.Empty, error)
	Service_Request_AddHeader(context.Context, *KV) (*empty.Empty, error)
	Service_Request_ClearHeader(context.Context, *String) (*empty.Empty, error)
	Service_Request_SetHeaders(context.Context, *_struct.Struct) (*empty.Empty, error)
	Service_Request_SetRawBody(context.Context, *String) (*empty.Empty, error)
	Service_Response_GetStatus(context.Context, *empty.Empty) (*Int, error)
	Service_Response_GetHeader(context.Context, *String) (*String, error)
	Service_Response_GetHeaders(context.Context, *Int) (*_struct.Struct, error)
	Service_Response_GetRawBody(context.Context, *empty.Empty) (*String, error)
	mustEmbedUnimplementedKongServer()
}

// UnimplementedKongServer must be embedded to have forward compatible implementations.
type UnimplementedKongServer struct {
}

func (UnimplementedKongServer) Client_GetIp(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client_GetIp not implemented")
}
func (UnimplementedKongServer) Client_GetForwardedIp(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client_GetForwardedIp not implemented")
}
func (UnimplementedKongServer) Client_GetPort(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client_GetPort not implemented")
}
func (UnimplementedKongServer) Client_GetForwardedPort(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client_GetForwardedPort not implemented")
}
func (UnimplementedKongServer) Client_GetCredential(context.Context, *empty.Empty) (*AuthenticatedCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client_GetCredential not implemented")
}
func (UnimplementedKongServer) Client_LoadConsumer(context.Context, *ConsumerSpec) (*Consumer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client_LoadConsumer not implemented")
}
func (UnimplementedKongServer) Client_GetConsumer(context.Context, *empty.Empty) (*Consumer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client_GetConsumer not implemented")
}
func (UnimplementedKongServer) Client_Authenticate(context.Context, *AuthenticateArgs) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client_Authenticate not implemented")
}
func (UnimplementedKongServer) Client_GetProtocol(context.Context, *Bool) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client_GetProtocol not implemented")
}
func (UnimplementedKongServer) Ctx_SetShared(context.Context, *KV) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ctx_SetShared not implemented")
}
func (UnimplementedKongServer) Ctx_GetShared(context.Context, *String) (*_struct.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ctx_GetShared not implemented")
}
func (UnimplementedKongServer) Ip_IsTrusted(context.Context, *String) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ip_IsTrusted not implemented")
}
func (UnimplementedKongServer) Log_Alert(context.Context, *_struct.ListValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log_Alert not implemented")
}
func (UnimplementedKongServer) Log_Crit(context.Context, *_struct.ListValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log_Crit not implemented")
}
func (UnimplementedKongServer) Log_Err(context.Context, *_struct.ListValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log_Err not implemented")
}
func (UnimplementedKongServer) Log_Warn(context.Context, *_struct.ListValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log_Warn not implemented")
}
func (UnimplementedKongServer) Log_Notice(context.Context, *_struct.ListValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log_Notice not implemented")
}
func (UnimplementedKongServer) Log_Info(context.Context, *_struct.ListValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log_Info not implemented")
}
func (UnimplementedKongServer) Log_Debug(context.Context, *_struct.ListValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log_Debug not implemented")
}
func (UnimplementedKongServer) Log_SetSerializeValue(context.Context, *KV) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log_SetSerializeValue not implemented")
}
func (UnimplementedKongServer) Log_Serialize(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log_Serialize not implemented")
}
func (UnimplementedKongServer) Nginx_GetVar(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nginx_GetVar not implemented")
}
func (UnimplementedKongServer) Nginx_GetTls1VersionStr(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nginx_GetTls1VersionStr not implemented")
}
func (UnimplementedKongServer) Nginx_SetCtx(context.Context, *KV) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nginx_SetCtx not implemented")
}
func (UnimplementedKongServer) Nginx_GetCtx(context.Context, *String) (*_struct.Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nginx_GetCtx not implemented")
}
func (UnimplementedKongServer) Nginx_ReqStartTime(context.Context, *empty.Empty) (*Number, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nginx_ReqStartTime not implemented")
}
func (UnimplementedKongServer) Nginx_GetSubsystem(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nginx_GetSubsystem not implemented")
}
func (UnimplementedKongServer) Node_GetId(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node_GetId not implemented")
}
func (UnimplementedKongServer) Node_GetMemoryStats(context.Context, *empty.Empty) (*MemoryStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node_GetMemoryStats not implemented")
}
func (UnimplementedKongServer) Request_GetScheme(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetScheme not implemented")
}
func (UnimplementedKongServer) Request_GetHost(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetHost not implemented")
}
func (UnimplementedKongServer) Request_GetPort(context.Context, *empty.Empty) (*Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetPort not implemented")
}
func (UnimplementedKongServer) Request_GetForwardedScheme(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetForwardedScheme not implemented")
}
func (UnimplementedKongServer) Request_GetForwardedHost(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetForwardedHost not implemented")
}
func (UnimplementedKongServer) Request_GetForwardedPort(context.Context, *empty.Empty) (*Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetForwardedPort not implemented")
}
func (UnimplementedKongServer) Request_GetHttpVersion(context.Context, *empty.Empty) (*Number, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetHttpVersion not implemented")
}
func (UnimplementedKongServer) Request_GetMethod(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetMethod not implemented")
}
func (UnimplementedKongServer) Request_GetPath(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetPath not implemented")
}
func (UnimplementedKongServer) Request_GetPathWithQuery(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetPathWithQuery not implemented")
}
func (UnimplementedKongServer) Request_GetRawQuery(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetRawQuery not implemented")
}
func (UnimplementedKongServer) Request_GetQueryArg(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetQueryArg not implemented")
}
func (UnimplementedKongServer) Request_GetQuery(context.Context, *Int) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetQuery not implemented")
}
func (UnimplementedKongServer) Request_GetHeader(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetHeader not implemented")
}
func (UnimplementedKongServer) Request_GetHeaders(context.Context, *Int) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetHeaders not implemented")
}
func (UnimplementedKongServer) Request_GetRawBody(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request_GetRawBody not implemented")
}
func (UnimplementedKongServer) Response_GetStatus(context.Context, *empty.Empty) (*Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response_GetStatus not implemented")
}
func (UnimplementedKongServer) Response_GetHeader(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response_GetHeader not implemented")
}
func (UnimplementedKongServer) Response_GetHeaders(context.Context, *Int) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response_GetHeaders not implemented")
}
func (UnimplementedKongServer) Response_GetSource(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response_GetSource not implemented")
}
func (UnimplementedKongServer) Response_SetStatus(context.Context, *Int) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response_SetStatus not implemented")
}
func (UnimplementedKongServer) Response_SetHeader(context.Context, *KV) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response_SetHeader not implemented")
}
func (UnimplementedKongServer) Response_AddHeader(context.Context, *KV) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response_AddHeader not implemented")
}
func (UnimplementedKongServer) Response_ClearHeader(context.Context, *String) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response_ClearHeader not implemented")
}
func (UnimplementedKongServer) Response_SetHeaders(context.Context, *_struct.Struct) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response_SetHeaders not implemented")
}
func (UnimplementedKongServer) Response_Exit(context.Context, *ExitArgs) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response_Exit not implemented")
}
func (UnimplementedKongServer) Router_GetRoute(context.Context, *empty.Empty) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Router_GetRoute not implemented")
}
func (UnimplementedKongServer) Router_GetService(context.Context, *empty.Empty) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Router_GetService not implemented")
}
func (UnimplementedKongServer) Service_SetUpstream(context.Context, *String) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_SetUpstream not implemented")
}
func (UnimplementedKongServer) Service_SetTarget(context.Context, *Target) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_SetTarget not implemented")
}
func (UnimplementedKongServer) Service_Request_SetScheme(context.Context, *String) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Request_SetScheme not implemented")
}
func (UnimplementedKongServer) Service_Request_SetPath(context.Context, *String) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Request_SetPath not implemented")
}
func (UnimplementedKongServer) Service_Request_SetRawQuery(context.Context, *String) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Request_SetRawQuery not implemented")
}
func (UnimplementedKongServer) Service_Request_SetMethod(context.Context, *String) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Request_SetMethod not implemented")
}
func (UnimplementedKongServer) Service_Request_SetQuery(context.Context, *_struct.Struct) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Request_SetQuery not implemented")
}
func (UnimplementedKongServer) Service_Request_SetHeader(context.Context, *KV) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Request_SetHeader not implemented")
}
func (UnimplementedKongServer) Service_Request_AddHeader(context.Context, *KV) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Request_AddHeader not implemented")
}
func (UnimplementedKongServer) Service_Request_ClearHeader(context.Context, *String) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Request_ClearHeader not implemented")
}
func (UnimplementedKongServer) Service_Request_SetHeaders(context.Context, *_struct.Struct) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Request_SetHeaders not implemented")
}
func (UnimplementedKongServer) Service_Request_SetRawBody(context.Context, *String) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Request_SetRawBody not implemented")
}
func (UnimplementedKongServer) Service_Response_GetStatus(context.Context, *empty.Empty) (*Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Response_GetStatus not implemented")
}
func (UnimplementedKongServer) Service_Response_GetHeader(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Response_GetHeader not implemented")
}
func (UnimplementedKongServer) Service_Response_GetHeaders(context.Context, *Int) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Response_GetHeaders not implemented")
}
func (UnimplementedKongServer) Service_Response_GetRawBody(context.Context, *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service_Response_GetRawBody not implemented")
}
func (UnimplementedKongServer) mustEmbedUnimplementedKongServer() {}

// UnsafeKongServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KongServer will
// result in compilation errors.
type UnsafeKongServer interface {
	mustEmbedUnimplementedKongServer()
}

func RegisterKongServer(s grpc.ServiceRegistrar, srv KongServer) {
	s.RegisterService(&Kong_ServiceDesc, srv)
}

func _Kong_Client_GetIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Client_GetIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Client_GetIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Client_GetIp(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Client_GetForwardedIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Client_GetForwardedIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Client_GetForwardedIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Client_GetForwardedIp(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Client_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Client_GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Client_GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Client_GetPort(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Client_GetForwardedPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Client_GetForwardedPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Client_GetForwardedPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Client_GetForwardedPort(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Client_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Client_GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Client_GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Client_GetCredential(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Client_LoadConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Client_LoadConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Client_LoadConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Client_LoadConsumer(ctx, req.(*ConsumerSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Client_GetConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Client_GetConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Client_GetConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Client_GetConsumer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Client_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Client_Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Client_Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Client_Authenticate(ctx, req.(*AuthenticateArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Client_GetProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Client_GetProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Client_GetProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Client_GetProtocol(ctx, req.(*Bool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Ctx_SetShared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Ctx_SetShared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Ctx_SetShared",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Ctx_SetShared(ctx, req.(*KV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Ctx_GetShared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Ctx_GetShared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Ctx_GetShared",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Ctx_GetShared(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Ip_IsTrusted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Ip_IsTrusted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Ip_IsTrusted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Ip_IsTrusted(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Log_Alert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Log_Alert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Log_Alert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Log_Alert(ctx, req.(*_struct.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Log_Crit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Log_Crit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Log_Crit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Log_Crit(ctx, req.(*_struct.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Log_Err_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Log_Err(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Log_Err",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Log_Err(ctx, req.(*_struct.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Log_Warn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Log_Warn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Log_Warn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Log_Warn(ctx, req.(*_struct.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Log_Notice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Log_Notice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Log_Notice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Log_Notice(ctx, req.(*_struct.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Log_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Log_Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Log_Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Log_Info(ctx, req.(*_struct.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Log_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Log_Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Log_Debug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Log_Debug(ctx, req.(*_struct.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Log_SetSerializeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Log_SetSerializeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Log_SetSerializeValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Log_SetSerializeValue(ctx, req.(*KV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Log_Serialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Log_Serialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Log_Serialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Log_Serialize(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Nginx_GetVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Nginx_GetVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Nginx_GetVar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Nginx_GetVar(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Nginx_GetTls1VersionStr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Nginx_GetTls1VersionStr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Nginx_GetTls1VersionStr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Nginx_GetTls1VersionStr(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Nginx_SetCtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Nginx_SetCtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Nginx_SetCtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Nginx_SetCtx(ctx, req.(*KV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Nginx_GetCtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Nginx_GetCtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Nginx_GetCtx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Nginx_GetCtx(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Nginx_ReqStartTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Nginx_ReqStartTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Nginx_ReqStartTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Nginx_ReqStartTime(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Nginx_GetSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Nginx_GetSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Nginx_GetSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Nginx_GetSubsystem(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Node_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Node_GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Node_GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Node_GetId(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Node_GetMemoryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Node_GetMemoryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Node_GetMemoryStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Node_GetMemoryStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetScheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetScheme(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetHost(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetPort(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetForwardedScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetForwardedScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetForwardedScheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetForwardedScheme(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetForwardedHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetForwardedHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetForwardedHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetForwardedHost(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetForwardedPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetForwardedPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetForwardedPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetForwardedPort(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetHttpVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetHttpVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetHttpVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetHttpVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetMethod(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetPath(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetPathWithQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetPathWithQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetPathWithQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetPathWithQuery(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetRawQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetRawQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetRawQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetRawQuery(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetQueryArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetQueryArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetQueryArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetQueryArg(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetQuery(ctx, req.(*Int))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetHeader(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetHeaders(ctx, req.(*Int))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Request_GetRawBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Request_GetRawBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Request_GetRawBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Request_GetRawBody(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Response_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Response_GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Response_GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Response_GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Response_GetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Response_GetHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Response_GetHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Response_GetHeader(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Response_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Response_GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Response_GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Response_GetHeaders(ctx, req.(*Int))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Response_GetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Response_GetSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Response_GetSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Response_GetSource(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Response_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Response_SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Response_SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Response_SetStatus(ctx, req.(*Int))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Response_SetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Response_SetHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Response_SetHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Response_SetHeader(ctx, req.(*KV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Response_AddHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Response_AddHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Response_AddHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Response_AddHeader(ctx, req.(*KV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Response_ClearHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Response_ClearHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Response_ClearHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Response_ClearHeader(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Response_SetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Response_SetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Response_SetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Response_SetHeaders(ctx, req.(*_struct.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Response_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Response_Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Response_Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Response_Exit(ctx, req.(*ExitArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Router_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Router_GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Router_GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Router_GetRoute(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Router_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Router_GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Router_GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Router_GetService(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_SetUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_SetUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_SetUpstream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_SetUpstream(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_SetTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_SetTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_SetTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_SetTarget(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Request_SetScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Request_SetScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Request_SetScheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Request_SetScheme(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Request_SetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Request_SetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Request_SetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Request_SetPath(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Request_SetRawQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Request_SetRawQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Request_SetRawQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Request_SetRawQuery(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Request_SetMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Request_SetMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Request_SetMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Request_SetMethod(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Request_SetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Request_SetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Request_SetQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Request_SetQuery(ctx, req.(*_struct.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Request_SetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Request_SetHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Request_SetHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Request_SetHeader(ctx, req.(*KV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Request_AddHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Request_AddHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Request_AddHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Request_AddHeader(ctx, req.(*KV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Request_ClearHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Request_ClearHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Request_ClearHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Request_ClearHeader(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Request_SetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_struct.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Request_SetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Request_SetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Request_SetHeaders(ctx, req.(*_struct.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Request_SetRawBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Request_SetRawBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Request_SetRawBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Request_SetRawBody(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Response_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Response_GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Response_GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Response_GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Response_GetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Response_GetHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Response_GetHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Response_GetHeader(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Response_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Response_GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Response_GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Response_GetHeaders(ctx, req.(*Int))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kong_Service_Response_GetRawBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KongServer).Service_Response_GetRawBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kong_plugin_protocol.Kong/Service_Response_GetRawBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KongServer).Service_Response_GetRawBody(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Kong_ServiceDesc is the grpc.ServiceDesc for Kong service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kong_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kong_plugin_protocol.Kong",
	HandlerType: (*KongServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Client_GetIp",
			Handler:    _Kong_Client_GetIp_Handler,
		},
		{
			MethodName: "Client_GetForwardedIp",
			Handler:    _Kong_Client_GetForwardedIp_Handler,
		},
		{
			MethodName: "Client_GetPort",
			Handler:    _Kong_Client_GetPort_Handler,
		},
		{
			MethodName: "Client_GetForwardedPort",
			Handler:    _Kong_Client_GetForwardedPort_Handler,
		},
		{
			MethodName: "Client_GetCredential",
			Handler:    _Kong_Client_GetCredential_Handler,
		},
		{
			MethodName: "Client_LoadConsumer",
			Handler:    _Kong_Client_LoadConsumer_Handler,
		},
		{
			MethodName: "Client_GetConsumer",
			Handler:    _Kong_Client_GetConsumer_Handler,
		},
		{
			MethodName: "Client_Authenticate",
			Handler:    _Kong_Client_Authenticate_Handler,
		},
		{
			MethodName: "Client_GetProtocol",
			Handler:    _Kong_Client_GetProtocol_Handler,
		},
		{
			MethodName: "Ctx_SetShared",
			Handler:    _Kong_Ctx_SetShared_Handler,
		},
		{
			MethodName: "Ctx_GetShared",
			Handler:    _Kong_Ctx_GetShared_Handler,
		},
		{
			MethodName: "Ip_IsTrusted",
			Handler:    _Kong_Ip_IsTrusted_Handler,
		},
		{
			MethodName: "Log_Alert",
			Handler:    _Kong_Log_Alert_Handler,
		},
		{
			MethodName: "Log_Crit",
			Handler:    _Kong_Log_Crit_Handler,
		},
		{
			MethodName: "Log_Err",
			Handler:    _Kong_Log_Err_Handler,
		},
		{
			MethodName: "Log_Warn",
			Handler:    _Kong_Log_Warn_Handler,
		},
		{
			MethodName: "Log_Notice",
			Handler:    _Kong_Log_Notice_Handler,
		},
		{
			MethodName: "Log_Info",
			Handler:    _Kong_Log_Info_Handler,
		},
		{
			MethodName: "Log_Debug",
			Handler:    _Kong_Log_Debug_Handler,
		},
		{
			MethodName: "Log_SetSerializeValue",
			Handler:    _Kong_Log_SetSerializeValue_Handler,
		},
		{
			MethodName: "Log_Serialize",
			Handler:    _Kong_Log_Serialize_Handler,
		},
		{
			MethodName: "Nginx_GetVar",
			Handler:    _Kong_Nginx_GetVar_Handler,
		},
		{
			MethodName: "Nginx_GetTls1VersionStr",
			Handler:    _Kong_Nginx_GetTls1VersionStr_Handler,
		},
		{
			MethodName: "Nginx_SetCtx",
			Handler:    _Kong_Nginx_SetCtx_Handler,
		},
		{
			MethodName: "Nginx_GetCtx",
			Handler:    _Kong_Nginx_GetCtx_Handler,
		},
		{
			MethodName: "Nginx_ReqStartTime",
			Handler:    _Kong_Nginx_ReqStartTime_Handler,
		},
		{
			MethodName: "Nginx_GetSubsystem",
			Handler:    _Kong_Nginx_GetSubsystem_Handler,
		},
		{
			MethodName: "Node_GetId",
			Handler:    _Kong_Node_GetId_Handler,
		},
		{
			MethodName: "Node_GetMemoryStats",
			Handler:    _Kong_Node_GetMemoryStats_Handler,
		},
		{
			MethodName: "Request_GetScheme",
			Handler:    _Kong_Request_GetScheme_Handler,
		},
		{
			MethodName: "Request_GetHost",
			Handler:    _Kong_Request_GetHost_Handler,
		},
		{
			MethodName: "Request_GetPort",
			Handler:    _Kong_Request_GetPort_Handler,
		},
		{
			MethodName: "Request_GetForwardedScheme",
			Handler:    _Kong_Request_GetForwardedScheme_Handler,
		},
		{
			MethodName: "Request_GetForwardedHost",
			Handler:    _Kong_Request_GetForwardedHost_Handler,
		},
		{
			MethodName: "Request_GetForwardedPort",
			Handler:    _Kong_Request_GetForwardedPort_Handler,
		},
		{
			MethodName: "Request_GetHttpVersion",
			Handler:    _Kong_Request_GetHttpVersion_Handler,
		},
		{
			MethodName: "Request_GetMethod",
			Handler:    _Kong_Request_GetMethod_Handler,
		},
		{
			MethodName: "Request_GetPath",
			Handler:    _Kong_Request_GetPath_Handler,
		},
		{
			MethodName: "Request_GetPathWithQuery",
			Handler:    _Kong_Request_GetPathWithQuery_Handler,
		},
		{
			MethodName: "Request_GetRawQuery",
			Handler:    _Kong_Request_GetRawQuery_Handler,
		},
		{
			MethodName: "Request_GetQueryArg",
			Handler:    _Kong_Request_GetQueryArg_Handler,
		},
		{
			MethodName: "Request_GetQuery",
			Handler:    _Kong_Request_GetQuery_Handler,
		},
		{
			MethodName: "Request_GetHeader",
			Handler:    _Kong_Request_GetHeader_Handler,
		},
		{
			MethodName: "Request_GetHeaders",
			Handler:    _Kong_Request_GetHeaders_Handler,
		},
		{
			MethodName: "Request_GetRawBody",
			Handler:    _Kong_Request_GetRawBody_Handler,
		},
		{
			MethodName: "Response_GetStatus",
			Handler:    _Kong_Response_GetStatus_Handler,
		},
		{
			MethodName: "Response_GetHeader",
			Handler:    _Kong_Response_GetHeader_Handler,
		},
		{
			MethodName: "Response_GetHeaders",
			Handler:    _Kong_Response_GetHeaders_Handler,
		},
		{
			MethodName: "Response_GetSource",
			Handler:    _Kong_Response_GetSource_Handler,
		},
		{
			MethodName: "Response_SetStatus",
			Handler:    _Kong_Response_SetStatus_Handler,
		},
		{
			MethodName: "Response_SetHeader",
			Handler:    _Kong_Response_SetHeader_Handler,
		},
		{
			MethodName: "Response_AddHeader",
			Handler:    _Kong_Response_AddHeader_Handler,
		},
		{
			MethodName: "Response_ClearHeader",
			Handler:    _Kong_Response_ClearHeader_Handler,
		},
		{
			MethodName: "Response_SetHeaders",
			Handler:    _Kong_Response_SetHeaders_Handler,
		},
		{
			MethodName: "Response_Exit",
			Handler:    _Kong_Response_Exit_Handler,
		},
		{
			MethodName: "Router_GetRoute",
			Handler:    _Kong_Router_GetRoute_Handler,
		},
		{
			MethodName: "Router_GetService",
			Handler:    _Kong_Router_GetService_Handler,
		},
		{
			MethodName: "Service_SetUpstream",
			Handler:    _Kong_Service_SetUpstream_Handler,
		},
		{
			MethodName: "Service_SetTarget",
			Handler:    _Kong_Service_SetTarget_Handler,
		},
		{
			MethodName: "Service_Request_SetScheme",
			Handler:    _Kong_Service_Request_SetScheme_Handler,
		},
		{
			MethodName: "Service_Request_SetPath",
			Handler:    _Kong_Service_Request_SetPath_Handler,
		},
		{
			MethodName: "Service_Request_SetRawQuery",
			Handler:    _Kong_Service_Request_SetRawQuery_Handler,
		},
		{
			MethodName: "Service_Request_SetMethod",
			Handler:    _Kong_Service_Request_SetMethod_Handler,
		},
		{
			MethodName: "Service_Request_SetQuery",
			Handler:    _Kong_Service_Request_SetQuery_Handler,
		},
		{
			MethodName: "Service_Request_SetHeader",
			Handler:    _Kong_Service_Request_SetHeader_Handler,
		},
		{
			MethodName: "Service_Request_AddHeader",
			Handler:    _Kong_Service_Request_AddHeader_Handler,
		},
		{
			MethodName: "Service_Request_ClearHeader",
			Handler:    _Kong_Service_Request_ClearHeader_Handler,
		},
		{
			MethodName: "Service_Request_SetHeaders",
			Handler:    _Kong_Service_Request_SetHeaders_Handler,
		},
		{
			MethodName: "Service_Request_SetRawBody",
			Handler:    _Kong_Service_Request_SetRawBody_Handler,
		},
		{
			MethodName: "Service_Response_GetStatus",
			Handler:    _Kong_Service_Response_GetStatus_Handler,
		},
		{
			MethodName: "Service_Response_GetHeader",
			Handler:    _Kong_Service_Response_GetHeader_Handler,
		},
		{
			MethodName: "Service_Response_GetHeaders",
			Handler:    _Kong_Service_Response_GetHeaders_Handler,
		},
		{
			MethodName: "Service_Response_GetRawBody",
			Handler:    _Kong_Service_Response_GetRawBody_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluginsocket.proto",
}
